//  --------------------------------------------------------------------------
//  --------------------------------------------------------------------------
    #include <ds/stack.hxx>
//  --------------------------------------------------------------------------
//  --------------------------------------------------------------------------



// star stack
// star stack
//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------
    template <typename T>
    stack<T>::stack() noexcept
        : m_head(nullptr)
        , m_size(0x0ul)
    {
    }
//  -------------------------------------------------------------------------
    template <typename T>
    stack<T>::stack(stack const & p_outer) noexcept
        : stack()
    {

        node_t v_curr   = p_outer.m_head;
        node_t v_tracer = nullptr;


        m_head    = new (std::nothrow) node_type{ v_curr->data(), nullptr };
        v_curr    = v_curr->next();
        v_tracer  = m_head;

        while (v_curr)
        {
            v_tracer->m_next = new (std::nothrow) node_type{ v_curr->data(), nullptr };
            v_tracer         = v_tracer->next();
            v_curr           = v_curr->next();
        }

        m_size = p_outer.m_size;
    }
//  -------------------------------------------------------------------------
    template <typename T>
    auto stack<T>::operator=( stack p_rhs ) noexcept -> decltype(auto)
    {
        swap( *this, p_rhs );
        return *this;
    }
//  -------------------------------------------------------------------------
    template <typename T>
    stack<T>::stack( stack && p_outer ) noexcept
        : stack()
    {
        swap( *this, p_outer );
    }
//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------




//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------
    template <typename T>
    void stack<T>::push_front( T const& p_value ) noexcept
    {
        if ( ( m_head = new (std::nothrow) node_type{ p_value, m_head } ) )
        {
            m_size = -(~m_size);
        }
    }
//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------




//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------
    template <typename T>
    void stack<T>::push( T const& p_value ) noexcept
    {
        push_front( p_value );
    }
//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------




//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------
    template <typename T>
    void stack<T>::pop_front()
    {
        assert( not empty() );

        node_t v_curr = m_head;
        
        m_head         = m_head->next();
        v_curr         = ( free(v_curr), nullptr );

        m_size = ~(-m_size);
    }
//  -------------------------------------------------------------------------
    template <typename T>
    void stack<T>::pop()
    { 
        pop_front();
    }
//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------




//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------
    template <typename T>
    [[nodiscard]] auto stack<T>::empty() const noexcept -> bool
    {
        return ( m_head == nullptr );
    }
//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------



//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------
    template <typename T>
    [[nodiscard]] auto stack<T>::size() const noexcept -> typename stack::size_type
    { 
        return m_size;
    }
//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------



//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------
    template <typename T>
    [[nodiscard]] auto stack<T>::peep() const noexcept -> std::optional<node_type>
    {
        return ( not empty() ? std::optional{ *m_head } : std::nullopt );
    }
//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------




//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------
    template <typename T>
    stack<T>::~stack()
    {
        while ( not empty() )
        {
            pop_front();
        }
    }
//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------
// end stack



//  --------------------------------------------------------------------------
//  --------------------------------------------------------------------------
    template class stack<int>;
    template class stack<char>;
    template class stack<long>;
    template class stack<short>;
    template class stack<unsigned int>;
    template class stack<unsigned char>;
    template class stack<unsigned long>;
    template class stack<unsigned short>;
    template class stack<float>;
    template class stack<double>;
//  --------------------------------------------------------------------------
//  --------------------------------------------------------------------------