#ifndef QUEUE_S_HXX
#define QUEUE_S_HXX

#include <algorithm>
#include <cassert>
#include <exception>
#include <functional>
#include <iostream>
#include <optional>
#include <string>
#include <ranges>


template <typename> class queue;
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    template <typename _Ty>
    concept is_class = std::is_class<_Ty>::value;
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------


// START NODE
//
template <typename _Ty>
    class node final
{

public:
    friend class queue<_Ty>;

public:
    using value_type      = _Ty;
    using reference       = std::add_lvalue_reference_t<_Ty>;
    using const_reference = std::add_lvalue_reference_t<std::add_const_t<_Ty>>;
    using pointer         = std::add_pointer_t<_Ty>;
    using const_pointer   = std::add_pointer_t<std::add_const_t<_Ty>>;


public:
    using node_ptr_t = std::add_pointer_t<node<_Ty>>;

public:
//  --------------------------------------------------------------------------
//  --------------------------------------------------------------------------
    node() noexcept requires( std::default_initializable<_Ty> )
        : m_data{ _Ty{} }
        , m_prev{ this }
        , m_next{ this }
   {}
//  --------------------------------------------------------------------------
    node(_Ty const & p_data) noexcept requires( std::copy_constructible<_Ty> )
        : m_data{ p_data }
        , m_prev{ this }
        , m_next{ this }
    {}
//  --------------------------------------------------------------------------

    node(_Ty && p_data) noexcept requires( std::move_constructible<_Ty> )
        : m_data{ std::move(p_data) }
        , m_prev{ this }
        , m_next{ this }
    {}
//  --------------------------------------------------------------------------
//  --------------------------------------------------------------------------



public:
//  --------------------------------------------------------------------------
//  --------------------------------------------------------------------------
    auto data()       noexcept -> decltype(auto) { return m_data; }
//  --------------------------------------------------------------------------
    auto data() const noexcept -> decltype(auto) { return m_data; }
//  --------------------------------------------------------------------------
//  --------------------------------------------------------------------------



public:
//  --------------------------------------------------------------------------
//  --------------------------------------------------------------------------
    void push_front( node_ptr_t p_node ) noexcept
    {
        p_node->m_next  = m_next;
        p_node->m_prev  = this;
        m_next->m_prev  = p_node;
        m_next          = p_node;
    }
//  --------------------------------------------------------------------------
    void push_back( node_ptr_t p_node ) noexcept
    {
        p_node->m_prev  = m_prev;
        p_node->m_next  = this;
        m_prev->m_next  = p_node;
        m_prev          = p_node;
    }
//  --------------------------------------------------------------------------
//  --------------------------------------------------------------------------


private:
    value_type m_data;
    node_ptr_t m_prev;
    node_ptr_t m_next;
};

//  //

//* END NODE *//



// /*    */ //

// /** **/ //
template <typename _Ty>
    class queue final
{
public:
    using node_type = node<_Ty>;
    using node_t    = typename node_type::node_ptr_t;
//  -------------------------------------------------------------------------
//  -------------------------------------------------------------------------

public:
    using value_type      = _Ty;
    using reference       = std::add_lvalue_reference_t<_Ty>;
    using const_reference = std::add_lvalue_reference_t<std::add_const_t<_Ty>>;
    using pointer         = std::add_pointer_t<_Ty>;
    using const_pointer   = std::add_pointer_t<std::add_const_t<_Ty>>;
    using size_type       = std::size_t;

public:
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    queue() noexcept requires( std::default_initializable<_Ty> );
//  -----------------------------------------------------------------------
    template <std::input_iterator I, std::sentinel_for<I> S>
    queue( I , S ) noexcept requires( std::convertible_to<std::iter_value_t<I>, _Ty> );
//  -----------------------------------------------------------------------
    template <std::ranges::input_range R>
    queue( R && ) noexcept requires( std::convertible_to<std::ranges::range_value_t<R>, _Ty>);
//  -----------------------------------------------------------------------
    queue( queue const & ) noexcept;
//  -----------------------------------------------------------------------
    queue( queue && ) noexcept;
//  -----------------------------------------------------------------------
    auto operator=(queue) noexcept -> decltype(auto);
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------



//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    void push_back( _Ty const& ) noexcept;
//  -----------------------------------------------------------------------
    void push( _Ty const& )      noexcept;
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------



//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    template <typename ...ARGS>
    void emplace_back(ARGS&&...) noexcept requires( is_class<_Ty> && std::constructible_from<_Ty, ARGS...> );
//  -----------------------------------------------------------------------
    template <typename ...ARGS>
    void emplace(ARGS&&...) noexcept requires( is_class<_Ty> && std::constructible_from<_Ty, ARGS...> );
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------


//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    void pop_front();
//  -----------------------------------------------------------------------
    void pop();
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------



//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    [[nodiscard]] auto empty() const noexcept -> bool;
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------



//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    [[nodiscard]] auto peek() const noexcept -> std::optional<node_type>;
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------


//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    [[nodiscard]] auto size() const noexcept -> size_type;
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------



//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    [[nodiscard]] auto front()       noexcept -> std::optional<node_type>;
//  -----------------------------------------------------------------------
    [[nodiscard]] auto front() const noexcept -> std::optional<node_type>;
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------



//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    [[nodiscard]] auto back()       noexcept -> std::optional<node_type>;
//  -----------------------------------------------------------------------
    [[nodiscard]] auto back() const noexcept -> std::optional<node_type>;
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------



//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    friend void swap(queue & p_lhs, queue & p_rhs)
    {
        using std::swap;

        swap(p_lhs.m_head, p_rhs.m_head);
        swap(p_lhs.m_size, p_rhs.m_size);
    }
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------




//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    ~queue();
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------



//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    void debug() noexcept
    {
        node_t v_node = m_head->m_next;

        while ( v_node != m_head )
        {
            std::cout << v_node->m_data << ' ';
            v_node = v_node->m_next;
        }
        std::cout << std::endl;
    }
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------


private:
    node_t    m_head;
    size_type m_size;
};


//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    template <typename _Ty>
    template <std::input_iterator I, std::sentinel_for<I> S>
    queue<_Ty>::queue( I p_begin, S p_end ) noexcept requires( std::convertible_to<std::iter_value_t<I>, _Ty> )
        : queue()
    {
        using std::placeholders::_1;

        std::ranges::for_each( p_begin, p_end,  std::bind(&queue::push_back, this, _1));
    }
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------



//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    template <typename _Ty>
    template <std::ranges::input_range R>
    queue<_Ty>::queue( R && p_container ) noexcept requires( std::convertible_to<std::ranges::range_value_t<R>, _Ty>)
        : queue(std::ranges::begin(p_container), std::ranges::end(p_container))
    {
    }
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------



//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    template <typename _Ty>
    template <typename ...ARGS>
    void queue<_Ty>::emplace_back( ARGS && ... p_args ) noexcept requires( is_class<_Ty> && std::constructible_from<_Ty, ARGS...> )
    {
        m_head->push_back( new (std::nothrow) node_type{ _Ty( std::forward<ARGS>(p_args)... ) } );

        m_size = -(~m_size);
    }
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------



//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------
    template <typename _Ty>
    template <typename ...ARGS>
    void queue<_Ty>::emplace( ARGS && ... p_args ) noexcept requires( is_class<_Ty> && std::constructible_from<_Ty, ARGS...> )
    {
        emplace_front( std::forward<ARGS>(p_args)... );
    }
//  -----------------------------------------------------------------------
//  -----------------------------------------------------------------------




//  --------------------------------------------------------------------------
//  --------------------------------------------------------------------------
    extern template class queue<int>;
    extern template class queue<char>;
    extern template class queue<long>;
    extern template class queue<short>;
    extern template class queue<unsigned int>;
    extern template class queue<unsigned char>;
    extern template class queue<unsigned long>;
    extern template class queue<unsigned short>;
    extern template class queue<float>;
    extern template class queue<double>;
    extern template class queue<std::string>;
//  --------------------------------------------------------------------------
//  --------------------------------------------------------------------------

#endif
